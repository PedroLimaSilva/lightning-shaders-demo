{"id":"src/shaders/RoundedRectangle/fragment.glsl","dependencies":[{"name":"/workspaces/lightning-shaders-demo/package.json","includedInParent":true,"mtime":1699364829266}],"generated":{"js":"module.exports = \"#ifdef GL_ES\\nprecision lowp float;\\n#define GLSLIFY 1\\n#endif\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler;\\nuniform vec2 resolution;\\nuniform float radius;\\nuniform float progress;\\n\\nfloat boxDistP(vec2 coord){\\n  vec2 d = (abs(coord - 0.5) - 0.5) * resolution + radius;\\n  float p = min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\\n  return clamp(-p, 0.0, 1.0);\\n}\\n\\nfloat progressBar(vec2 coord) {\\n  return clamp((step(coord.x, progress) - step(coord.y, 0.95)), 0.0, 1.0);\\n}\\n\\nvoid main() {\\n  float isInsideRoundedBounds = boxDistP(vTextureCoord);\\n\\n  vec4 colorFromImage = texture2D(uSampler, vTextureCoord); \\n\\n  vec4 color = colorFromImage * vColor;\\n\\n  float isInsideProgressBar = progressBar(vTextureCoord);\\n\\n  gl_FragColor = mix(color, vec4(1.0), isInsideProgressBar) * isInsideRoundedBounds;\\n}\\n\";"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"src/shaders/RoundedRectangle/fragment.glsl","original":{"line":1,"column":0},"name":"module"},{"generated":{"line":1,"column":6},"source":"src/shaders/RoundedRectangle/fragment.glsl","original":{"line":1,"column":6}},{"generated":{"line":1,"column":7},"source":"src/shaders/RoundedRectangle/fragment.glsl","original":{"line":1,"column":7},"name":"exports"},{"generated":{"line":1,"column":14},"source":"src/shaders/RoundedRectangle/fragment.glsl","original":{"line":1,"column":14}},{"generated":{"line":1,"column":17},"source":"src/shaders/RoundedRectangle/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":883},"source":"src/shaders/RoundedRectangle/fragment.glsl","original":{"line":1,"column":881}}],"sources":{"src/shaders/RoundedRectangle/fragment.glsl":"module.exports=\"#ifdef GL_ES\\nprecision lowp float;\\n#define GLSLIFY 1\\n#endif\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler;\\nuniform vec2 resolution;\\nuniform float radius;\\nuniform float progress;\\n\\nfloat boxDistP(vec2 coord){\\n  vec2 d = (abs(coord - 0.5) - 0.5) * resolution + radius;\\n  float p = min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\\n  return clamp(-p, 0.0, 1.0);\\n}\\n\\nfloat progressBar(vec2 coord) {\\n  return clamp((step(coord.x, progress) - step(coord.y, 0.95)), 0.0, 1.0);\\n}\\n\\nvoid main() {\\n  float isInsideRoundedBounds = boxDistP(vTextureCoord);\\n\\n  vec4 colorFromImage = texture2D(uSampler, vTextureCoord); \\n\\n  vec4 color = colorFromImage * vColor;\\n\\n  float isInsideProgressBar = progressBar(vTextureCoord);\\n\\n  gl_FragColor = mix(color, vec4(1.0), isInsideProgressBar) * isInsideRoundedBounds;\\n}\\n\";"},"lineCount":null}},"error":null,"hash":"12f5638aa4a68d40a02178abbb58d0a7","cacheData":{"env":{}}}